services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
      - '7888:7888' # nREPL port
    volumes:
      - ./src:/app/src
      - ./test:/app/test
      - ./resources:/app/resources
      - ./dev:/app/dev
    environment:
      - ENV=development
      - DATABASE_URL=jdbc:postgresql://postgres:5432/cripto_monitor_dev?user=dev_user&password=dev_pass
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - cripto-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=cripto_monitor_dev
      - POSTGRES_USER=dev_user
      - POSTGRES_PASSWORD=dev_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U dev_user -d cripto_monitor_dev']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cripto-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - cripto-network
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - '8080:8080' # Shadow-cljs dev server
      - '9630:9630' # Shadow-cljs REPL server
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./shadow-cljs.edn:/app/shadow-cljs.edn
      - ./package.json:/app/package.json
      - ./deps.edn:/app/deps.edn
      - frontend_node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - app
    networks:
      - cripto-network
    restart: unless-stopped
    command: ['npx', 'shadow-cljs', 'watch', 'app']

  adminer:
    image: adminer:latest
    ports:
      - '8081:8080' # Mudei para 8081 para n√£o conflitar com frontend
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - cripto-network
    profiles:
      - tools

volumes:
  postgres_dev_data:
  redis_dev_data:
  frontend_node_modules:

networks:
  cripto-network:
    driver: bridge
